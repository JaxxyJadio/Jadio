from PyQt6.QtWidgets import QWidget, QVBoxLayout, QLabel, QTextEdit, QPushButton, QComboBox, QTabWidget, QLineEdit, QHBoxLayout
from .styles.aigentstyle import CODEAIGENT_PANEL_STYLE, CODEAIGENT_TAB_STYLE, CODEAIGENT_BOTTOM_TAB_STYLE

class CodeAIgentPanel(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setObjectName("CodeAIgentPanel")
        self.setStyleSheet(CODEAIGENT_PANEL_STYLE + CODEAIGENT_TAB_STYLE + CODEAIGENT_BOTTOM_TAB_STYLE)
        layout = QVBoxLayout(self)
        layout.setContentsMargins(12, 12, 12, 12)
        layout.setSpacing(8)
        self.label = QLabel("Code.AIgent")
        self.label.setObjectName("CodeAIgentHeader")
        layout.addWidget(self.label)
        # Response area (main content)
        self.text_edit = QTextEdit()
        self.text_edit.setObjectName("CodeAIgentTextEdit")
        self.text_edit.setReadOnly(True)
        layout.addWidget(self.text_edit, stretch=1)
        # Now create the top (input) tabs
        self.tabs = QTabWidget()
        self.tabs.setObjectName("CodeAIgentInputTabs")
        # Prompt tab
        prompt_tab = QWidget()
        prompt_layout = QHBoxLayout(prompt_tab)
        prompt_layout.setContentsMargins(0, 0, 0, 0)
        prompt_layout.setSpacing(6)
        self.prompt_entry = QLineEdit()
        self.prompt_entry.setObjectName("CodeAIgentPromptEntry")
        self.prompt_entry.setPlaceholderText("Type your question or command...")
        self.prompt_entry.setMinimumHeight(72)
        self.prompt_entry.setMinimumWidth(200)
        prompt_layout.addWidget(self.prompt_entry, stretch=2)
        self.ask_button = QPushButton("Ask")
        self.ask_button.setObjectName("CodeAIgentAskButton")
        self.ask_button.setMinimumWidth(30)
        self.ask_button.setMaximumWidth(40)
        self.ask_button.setMinimumHeight(28)
        self.ask_button.setStyleSheet("margin-right: 10px;")
        prompt_layout.addWidget(self.ask_button, stretch=0)
        self.tabs.addTab(prompt_tab, "Prompt")
        # Tools tab
        tools_tab = QWidget()
        tools_layout = QHBoxLayout(tools_tab)
        self.tools_button = QPushButton("Tools")
        self.tools_button.setObjectName("CodeAIgentToolsButton")
        tools_layout.addWidget(self.tools_button)
        tools_layout.addStretch()
        self.tabs.addTab(tools_tab, "Tools")
        # Agent tab
        agent_tab = QWidget()
        agent_layout = QHBoxLayout(agent_tab)
        self.model_combo = QComboBox()
        self.model_combo.setObjectName("CodeAIgentModelCombo")
        self.model_combo.addItems(["gpt-4", "gpt-3.5-turbo", "llama-3", "custom..."])
        agent_layout.addWidget(self.model_combo)
        self.agent_ask_toggle = QPushButton("Agent Mode")
        self.agent_ask_toggle.setCheckable(True)
        self.agent_ask_toggle.setObjectName("CodeAIgentAgentAskToggle")
        agent_layout.addWidget(self.agent_ask_toggle)
        agent_layout.addStretch()
        self.tabs.addTab(agent_tab, "Agent")
        # Context tab
        context_tab = QWidget()
        context_layout = QVBoxLayout(context_tab)
        context_label = QLabel("Context features coming soon...")
        context_layout.addWidget(context_label)
        self.tabs.addTab(context_tab, "Context")
        # Settings tab
        settings_tab = QWidget()
        settings_layout = QVBoxLayout(settings_tab)
        settings_label = QLabel("Settings coming soon...")
        settings_layout.addWidget(settings_label)
        self.tabs.addTab(settings_tab, "Settings")
        # Extra tab
        extra_tab = QWidget()
        extra_layout = QVBoxLayout(extra_tab)
        extra_label = QLabel("Extra tab content coming soon...")
        extra_layout.addWidget(extra_label)
        self.tabs.addTab(extra_tab, "Extra")
        layout.addWidget(self.tabs)
        # Create bottom tabs before adding to layout
        self.bottom_tabs = QTabWidget()
        self.bottom_tabs.setObjectName("CodeAIgentBottomTabs")
        for name in ["History", "Snips", "Files", "Plug", "Env", "Docs"]:
            tab = QWidget()
            tab_layout = QVBoxLayout(tab)
            tab_label = QLabel(f"{name} tab content coming soon...")
            tab_layout.addWidget(tab_label)
            self.bottom_tabs.addTab(tab, name)
        layout.addWidget(self.bottom_tabs)
        self.setMaximumWidth(500)

    def set_response(self, text):
        self.text_edit.setPlainText(text)
